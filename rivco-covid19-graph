#!/usr/bin/env python3

import datetime
import json
import math
import urllib.request

import pandas as pd
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as ticker

def fetch_json(url):
    with urllib.request.urlopen(url) as response:
        return json.load(response)

def feature2row(feature):
    attributes = feature['attributes']
    date = datetime.datetime.utcfromtimestamp(attributes['DateReported'] / 1000)
    return [date, attributes['ReportedNewCases']]

def json2data(json):
    data = [feature2row(feature) for feature in json['features']]
    while data[0][1] == 0:
        del data[0]
    return data

def data2dataframe(data):
    df = pd.DataFrame.from_records(data, columns = ['Date', 'New Cases'])
    df.index = pd.to_datetime(df.pop('Date')).dt.date
    df['7-day Average'] = df.rolling(window=7).mean()
    return df

def simple_plot(df, last_updated):
    title = 'Riverside County\nCOVID-19 New Cases\nUp to ' + last_updated
    df.plot(title=title).get_figure().savefig('figure.png')

def plot_events(ax):
    events = [
        {
            'date': '2020-03-19',
            'name': 'CA Stay-at-Home Order',
        }, {
            'date': '2020-04-04',
            'name': 'RivCo Mask Order',
        }, {
            'date': '2020-05-01',
            'name': 'Stay-at-Home Protests',
        }, {
            'date': '2020-05-09',
            'name': 'RivCo Recinds Mask Order',
        }, {
            'date': '2020-05-22',
            'name': 'RivCo Enters Accelerated Stage 2 Reopening',
        }, {
            'date': '2020-05-25',
            'name': 'Memorial Day',
        }, {
            'date': '2020-06-01',
            'name': 'George Floyd Protests',
        }, {
            'date': '2020-06-18',
            'name': 'CA Mask Order',
        }, {
            'date': '2020-06-30',
            'name': 'RivCo Bars Closure',
        }, {
            'date': '2020-07-01',
            'name': 'CA Indoor Closure',
        }
    ]

    dates = [datetime.datetime.strptime(event['date'], "%Y-%m-%d") for event in events]
    level_min = 150
    level_increment = 70
    level_max = level_min + level_increment * len(events)
    levels = list(range(level_min, level_max, level_increment))
    markerline, stemline, baseline = ax.stem(dates, levels, linefmt='grey', markerfmt=',')
    for line in stemline:
        line.linewidth = 0.1

    for (event, level) in zip(events, levels):
        date = datetime.datetime.strptime(event['date'], "%Y-%m-%d")
        ax.annotate(event['name'], xy=(date, level), horizontalalignment='right')

    return max(levels)

def advanced_plot(df, last_updated):
    fig, ax = plt.subplots()
    plt.setp(ax.get_xticklabels(), rotation=30, ha="right")
    title = 'Riverside County\nCOVID-19 New Cases\nUp to ' + last_updated
    plt.title(title)

    ax.set_axisbelow(True)
    ax.yaxis.grid(color='0.9', linestyle='dashed')

    ax.bar(df.index, df['New Cases'], label='New Cases per Day')
    ax.plot(df.index, df['7-day Average'], label='7-day Average', color='Red')
    max_level = plot_events(ax)

    ax.legend(loc='upper left')
    max_y = max([max(df['New Cases']), max_level]) + 50
    plt.ylim(0, max_y)

    date_min = min(df.index)
    date_max = max(df.index)
    # Add 1 day for some whitespace between the last day and the border
    plt.xlim(date_min, date_max + datetime.timedelta(days=1))

    # Major tick every N days
    nbins = math.ceil((date_max - date_min).days / 7)
    locator = ticker.MaxNLocator(nbins=nbins)
    ax.xaxis.set_major_locator(locator)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    plt.tight_layout()

    fig.set_size_inches(11, 8)
    fig.savefig('figure.png')

url = 'https://services1.arcgis.com/pWmBUdSlVpXStHU6/arcgis/rest/services/COVID19_Cases_DateReport/FeatureServer/0/query?f=json&where=1%3D1&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=DateReported%20asc&resultOffset=0&resultRecordCount=32000&resultType=standard&cacheHint=true'
json = fetch_json(url)
data = json2data(json)
df = data2dataframe(data)
last_updated = max(df.index).strftime("%Y-%m-%d")
print('Last updated: ' + last_updated)
# simple_plot(df, last_updated)
advanced_plot(df, last_updated)
